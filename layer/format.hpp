/* Copyright (c) 2017, ARM Limited and Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#pragma once

#include <vulkan/vulkan.h>

namespace MPD
{
static inline bool formatIsDepthOnly(VkFormat format)
{
	switch (format)
	{
	case VK_FORMAT_D16_UNORM:
	case VK_FORMAT_D32_SFLOAT:
	case VK_FORMAT_X8_D24_UNORM_PACK32:
		return true;

	default:
		return false;
	}
}

static inline bool formatIsStencilOnly(VkFormat format)
{
	switch (format)
	{
	case VK_FORMAT_S8_UINT:
		return true;

	default:
		return false;
	}
}

static inline bool formatIsDepthStencil(VkFormat format)
{
	switch (format)
	{
	case VK_FORMAT_D16_UNORM_S8_UINT:
	case VK_FORMAT_D24_UNORM_S8_UINT:
	case VK_FORMAT_D32_SFLOAT_S8_UINT:
		return true;

	default:
		return false;
	}
}

static inline bool formatHasFullThroughputBlending(VkFormat format)
{
	switch (format)
	{
	case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
	case VK_FORMAT_R16_SFLOAT:
	case VK_FORMAT_R16G16_SFLOAT:
	case VK_FORMAT_R16G16B16_SFLOAT:
	case VK_FORMAT_R16G16B16A16_SFLOAT:
	case VK_FORMAT_R32_SFLOAT:
	case VK_FORMAT_R32G32_SFLOAT:
	case VK_FORMAT_R32G32B32_SFLOAT:
	case VK_FORMAT_R32G32B32A32_SFLOAT:
		return false;

	default:
		return true;
	}
}

static inline const char *formatToString(VkFormat format)
{
#define fmt(x) \
	case x:    \
		return #x
	switch (format)
	{
		fmt(VK_FORMAT_UNDEFINED);
		fmt(VK_FORMAT_R4G4_UNORM_PACK8);
		fmt(VK_FORMAT_R4G4B4A4_UNORM_PACK16);
		fmt(VK_FORMAT_B4G4R4A4_UNORM_PACK16);
		fmt(VK_FORMAT_R5G6B5_UNORM_PACK16);
		fmt(VK_FORMAT_B5G6R5_UNORM_PACK16);
		fmt(VK_FORMAT_R5G5B5A1_UNORM_PACK16);
		fmt(VK_FORMAT_B5G5R5A1_UNORM_PACK16);
		fmt(VK_FORMAT_A1R5G5B5_UNORM_PACK16);
		fmt(VK_FORMAT_R8_UNORM);
		fmt(VK_FORMAT_R8_SNORM);
		fmt(VK_FORMAT_R8_USCALED);
		fmt(VK_FORMAT_R8_SSCALED);
		fmt(VK_FORMAT_R8_UINT);
		fmt(VK_FORMAT_R8_SINT);
		fmt(VK_FORMAT_R8_SRGB);
		fmt(VK_FORMAT_R8G8_UNORM);
		fmt(VK_FORMAT_R8G8_SNORM);
		fmt(VK_FORMAT_R8G8_USCALED);
		fmt(VK_FORMAT_R8G8_SSCALED);
		fmt(VK_FORMAT_R8G8_UINT);
		fmt(VK_FORMAT_R8G8_SINT);
		fmt(VK_FORMAT_R8G8_SRGB);
		fmt(VK_FORMAT_R8G8B8_UNORM);
		fmt(VK_FORMAT_R8G8B8_SNORM);
		fmt(VK_FORMAT_R8G8B8_USCALED);
		fmt(VK_FORMAT_R8G8B8_SSCALED);
		fmt(VK_FORMAT_R8G8B8_UINT);
		fmt(VK_FORMAT_R8G8B8_SINT);
		fmt(VK_FORMAT_R8G8B8_SRGB);
		fmt(VK_FORMAT_B8G8R8_UNORM);
		fmt(VK_FORMAT_B8G8R8_SNORM);
		fmt(VK_FORMAT_B8G8R8_USCALED);
		fmt(VK_FORMAT_B8G8R8_SSCALED);
		fmt(VK_FORMAT_B8G8R8_UINT);
		fmt(VK_FORMAT_B8G8R8_SINT);
		fmt(VK_FORMAT_B8G8R8_SRGB);
		fmt(VK_FORMAT_R8G8B8A8_UNORM);
		fmt(VK_FORMAT_R8G8B8A8_SNORM);
		fmt(VK_FORMAT_R8G8B8A8_USCALED);
		fmt(VK_FORMAT_R8G8B8A8_SSCALED);
		fmt(VK_FORMAT_R8G8B8A8_UINT);
		fmt(VK_FORMAT_R8G8B8A8_SINT);
		fmt(VK_FORMAT_R8G8B8A8_SRGB);
		fmt(VK_FORMAT_B8G8R8A8_UNORM);
		fmt(VK_FORMAT_B8G8R8A8_SNORM);
		fmt(VK_FORMAT_B8G8R8A8_USCALED);
		fmt(VK_FORMAT_B8G8R8A8_SSCALED);
		fmt(VK_FORMAT_B8G8R8A8_UINT);
		fmt(VK_FORMAT_B8G8R8A8_SINT);
		fmt(VK_FORMAT_B8G8R8A8_SRGB);
		fmt(VK_FORMAT_A8B8G8R8_UNORM_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_SNORM_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_USCALED_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_UINT_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_SINT_PACK32);
		fmt(VK_FORMAT_A8B8G8R8_SRGB_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_UNORM_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_SNORM_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_USCALED_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_UINT_PACK32);
		fmt(VK_FORMAT_A2R10G10B10_SINT_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_UNORM_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_SNORM_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_USCALED_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_UINT_PACK32);
		fmt(VK_FORMAT_A2B10G10R10_SINT_PACK32);
		fmt(VK_FORMAT_R16_UNORM);
		fmt(VK_FORMAT_R16_SNORM);
		fmt(VK_FORMAT_R16_USCALED);
		fmt(VK_FORMAT_R16_SSCALED);
		fmt(VK_FORMAT_R16_UINT);
		fmt(VK_FORMAT_R16_SINT);
		fmt(VK_FORMAT_R16_SFLOAT);
		fmt(VK_FORMAT_R16G16_UNORM);
		fmt(VK_FORMAT_R16G16_SNORM);
		fmt(VK_FORMAT_R16G16_USCALED);
		fmt(VK_FORMAT_R16G16_SSCALED);
		fmt(VK_FORMAT_R16G16_UINT);
		fmt(VK_FORMAT_R16G16_SINT);
		fmt(VK_FORMAT_R16G16_SFLOAT);
		fmt(VK_FORMAT_R16G16B16_UNORM);
		fmt(VK_FORMAT_R16G16B16_SNORM);
		fmt(VK_FORMAT_R16G16B16_USCALED);
		fmt(VK_FORMAT_R16G16B16_SSCALED);
		fmt(VK_FORMAT_R16G16B16_UINT);
		fmt(VK_FORMAT_R16G16B16_SINT);
		fmt(VK_FORMAT_R16G16B16_SFLOAT);
		fmt(VK_FORMAT_R16G16B16A16_UNORM);
		fmt(VK_FORMAT_R16G16B16A16_SNORM);
		fmt(VK_FORMAT_R16G16B16A16_USCALED);
		fmt(VK_FORMAT_R16G16B16A16_SSCALED);
		fmt(VK_FORMAT_R16G16B16A16_UINT);
		fmt(VK_FORMAT_R16G16B16A16_SINT);
		fmt(VK_FORMAT_R16G16B16A16_SFLOAT);
		fmt(VK_FORMAT_R32_UINT);
		fmt(VK_FORMAT_R32_SINT);
		fmt(VK_FORMAT_R32_SFLOAT);
		fmt(VK_FORMAT_R32G32_UINT);
		fmt(VK_FORMAT_R32G32_SINT);
		fmt(VK_FORMAT_R32G32_SFLOAT);
		fmt(VK_FORMAT_R32G32B32_UINT);
		fmt(VK_FORMAT_R32G32B32_SINT);
		fmt(VK_FORMAT_R32G32B32_SFLOAT);
		fmt(VK_FORMAT_R32G32B32A32_UINT);
		fmt(VK_FORMAT_R32G32B32A32_SINT);
		fmt(VK_FORMAT_R32G32B32A32_SFLOAT);
		fmt(VK_FORMAT_R64_UINT);
		fmt(VK_FORMAT_R64_SINT);
		fmt(VK_FORMAT_R64_SFLOAT);
		fmt(VK_FORMAT_R64G64_UINT);
		fmt(VK_FORMAT_R64G64_SINT);
		fmt(VK_FORMAT_R64G64_SFLOAT);
		fmt(VK_FORMAT_R64G64B64_UINT);
		fmt(VK_FORMAT_R64G64B64_SINT);
		fmt(VK_FORMAT_R64G64B64_SFLOAT);
		fmt(VK_FORMAT_R64G64B64A64_UINT);
		fmt(VK_FORMAT_R64G64B64A64_SINT);
		fmt(VK_FORMAT_R64G64B64A64_SFLOAT);
		fmt(VK_FORMAT_B10G11R11_UFLOAT_PACK32);
		fmt(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
		fmt(VK_FORMAT_D16_UNORM);
		fmt(VK_FORMAT_X8_D24_UNORM_PACK32);
		fmt(VK_FORMAT_D32_SFLOAT);
		fmt(VK_FORMAT_S8_UINT);
		fmt(VK_FORMAT_D16_UNORM_S8_UINT);
		fmt(VK_FORMAT_D24_UNORM_S8_UINT);
		fmt(VK_FORMAT_D32_SFLOAT_S8_UINT);
		fmt(VK_FORMAT_BC1_RGB_UNORM_BLOCK);
		fmt(VK_FORMAT_BC1_RGB_SRGB_BLOCK);
		fmt(VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
		fmt(VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
		fmt(VK_FORMAT_BC2_UNORM_BLOCK);
		fmt(VK_FORMAT_BC2_SRGB_BLOCK);
		fmt(VK_FORMAT_BC3_UNORM_BLOCK);
		fmt(VK_FORMAT_BC3_SRGB_BLOCK);
		fmt(VK_FORMAT_BC4_UNORM_BLOCK);
		fmt(VK_FORMAT_BC4_SNORM_BLOCK);
		fmt(VK_FORMAT_BC5_UNORM_BLOCK);
		fmt(VK_FORMAT_BC5_SNORM_BLOCK);
		fmt(VK_FORMAT_BC6H_UFLOAT_BLOCK);
		fmt(VK_FORMAT_BC6H_SFLOAT_BLOCK);
		fmt(VK_FORMAT_BC7_UNORM_BLOCK);
		fmt(VK_FORMAT_BC7_SRGB_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
		fmt(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
		fmt(VK_FORMAT_EAC_R11_UNORM_BLOCK);
		fmt(VK_FORMAT_EAC_R11_SNORM_BLOCK);
		fmt(VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
		fmt(VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
		fmt(VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
		fmt(VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
	default:
		return "Unknown VK_FORMAT";
	}

#undef fmt
}
}